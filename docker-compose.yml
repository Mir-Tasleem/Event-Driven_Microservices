version: '3.9'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      retries: 5
    networks:
      - backend

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    depends_on:
      - zookeeper
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "9092" ]
      interval: 10s
      retries: 5
    networks:
      - backend



  pg-order:
    image: postgres:15-alpine
    container_name: pg-order
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: order_user
      POSTGRES_PASSWORD: order_pass
      POSTGRES_DB: order_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U order_user"]
      interval: 10s
      retries: 5
    networks:
      - backend

  pg-inventory:
    image: postgres:15-alpine
    container_name: pg-inventory
    ports:
      - "5434:5432"
    environment:
      POSTGRES_USER: inventory_user
      POSTGRES_PASSWORD: inventory_pass
      POSTGRES_DB: inventory_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U inventory_user"]
      interval: 10s
      retries: 5
    networks:
      - backend

  pg-payment:
    image: postgres:15-alpine
    container_name: pg-payment
    ports:
      - "5435:5432"
    environment:
      POSTGRES_USER: payment_user
      POSTGRES_PASSWORD: payment_pass
      POSTGRES_DB: payment_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U payment_user"]
      interval: 10s
      retries: 5
    networks:
      - backend

  pg-notificaton:
    image: postgres:15-alpine
    container_name: pg-notification
    ports:
      - "5436:5432"
    environment:
      POSTGRES_USER: notification_user
      POSTGRES_PASSWORD: notification_pass
      POSTGRES_DB: notification_db
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U notification_user" ]
      interval: 10s
      retries: 5
    networks:
      - backend

networks:
  backend:
    driver: bridge



#version: '3.9'
#
#services:
#  zookeeper:
#    image: confluentinc/cp-zookeeper:7.5.0
#    container_name: zookeeper
#    environment:
#      ZOOKEEPER_CLIENT_PORT: 2181
#      ZOOKEEPER_TICK_TIME: 2000
#    ports:
#      - "2181:2181"
#    healthcheck:
#      test: ["CMD", "nc", "-z", "localhost", "2181"]
#      interval: 10s
#      retries: 5
#    networks:
#      - backend
#
#  kafka:
#    image: confluentinc/cp-kafka:7.5.0
#    container_name: kafka
#    depends_on:
#      - zookeeper
#    ports:
#      - "9092:9092"
#    environment:
#      KAFKA_BROKER_ID: 1
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#    healthcheck:
#      test: ["CMD", "nc", "-z", "localhost", "9092"]
#      interval: 10s
#      retries: 5
#    networks:
#      - backend
#
#  pg-order:
#    image: postgres:15-alpine
#    container_name: pg-order
#    environment:
#      POSTGRES_USER: order_user
#      POSTGRES_PASSWORD: order_pass
#      POSTGRES_DB: order_db
#    ports:
#      - "5432:5432"
#    healthcheck:
#      test: ["CMD-SHELL", "pg_isready -U order_user"]
#      interval: 10s
#      retries: 5
#    networks:
#      - backend
#
#  pg-inventory:
#    image: postgres:15-alpine
#    container_name: pg-inventory
#    environment:
#      POSTGRES_USER: inventory_user
#      POSTGRES_PASSWORD: inventory_pass
#      POSTGRES_DB: inventory_db
#    healthcheck:
#      test: ["CMD-SHELL", "pg_isready -U inventory_user"]
#      interval: 10s
#      retries: 5
#    networks:
#      - backend
#
#  pg-payment:
#    image: postgres:15-alpine
#    container_name: pg-payment
#    environment:
#      POSTGRES_USER: payment_user
#      POSTGRES_PASSWORD: payment_pass
#      POSTGRES_DB: payment_db
#    healthcheck:
#      test: ["CMD-SHELL", "pg_isready -U payment_user"]
#      interval: 10s
#      retries: 5
#    networks:
#      - backend
#
#  order-svc:
#    build:
#      context: ./order-svc
#      dockerfile: Dockerfile
#    container_name: order-svc
#    depends_on:
#      kafka:
#        condition: service_healthy
#      pg-order:
#        condition: service_healthy
#    ports:
#      - "8080:8080"
#    environment:
#      SPRING_DATASOURCE_URL: jdbc:postgresql://pg-order:5432/order_db
#      SPRING_DATASOURCE_USERNAME: order_user
#      SPRING_DATASOURCE_PASSWORD: order_pass
#      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
#    healthcheck:
#      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
#      interval: 15s
#      timeout: 5s
#      retries: 3
#    networks:
#      - backend
#
#  inventory-svc:
#    build:
#      context: ./inventory-svc
#      dockerfile: Dockerfile
#    container_name: inventory-svc
#    depends_on:
#      kafka:
#        condition: service_healthy
#      pg-inventory:
#        condition: service_healthy
#    environment:
#      SPRING_DATASOURCE_URL: jdbc:postgresql://pg-inventory:5432/inventory_db
#      SPRING_DATASOURCE_USERNAME: inventory_user
#      SPRING_DATASOURCE_PASSWORD: inventory_pass
#      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
#    healthcheck:
#      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
#      interval: 15s
#      timeout: 5s
#      retries: 3
#    networks:
#      - backend
#
#  payment-svc:
#    build:
#      context: ./payment-svc
#      dockerfile: Dockerfile
#    container_name: payment-svc
#    depends_on:
#      kafka:
#        condition: service_healthy
#      pg-payment:
#        condition: service_healthy
#    environment:
#      SPRING_DATASOURCE_URL: jdbc:postgresql://pg-payment:5432/payment_db
#      SPRING_DATASOURCE_USERNAME: payment_user
#      SPRING_DATASOURCE_PASSWORD: payment_pass
#      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
#    healthcheck:
#      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
#      interval: 15s
#      timeout: 5s
#      retries: 3
#    networks:
#      - backend
#
#  notification-svc:
#    build:
#      context: ./notification-svc
#      dockerfile: Dockerfile
#    container_name: notification-svc
#    depends_on:
#      kafka:
#        condition: service_healthy
#    environment:
#      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
#    healthcheck:
#      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
#      interval: 15s
#      timeout: 5s
#      retries: 3
#    networks:
#      - backend
#
#networks:
#  backend:
#    driver: bridge
